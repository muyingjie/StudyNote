babel需要安装的东西：
npm install @babel/core @babel/preset-env babel-loader --save-dev

解析ES6需要配置的预设
.babelrc
{
  "presets": [
    "@babel/preset-env"
  ]
}

module: {
 rules: [
   { test: /.js$/, use: "babel-loader" }
 ]
}

解析React JSX需要的配置：
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react" // 解析react
  ]
}

npm install react react-dom @babel/preset-react --save-dev


"plugins": [
  "@babel/proposal-class-properties"
]

'use strict';

import React from 'react';
import ReactDOM from 'react-dom';

class Search extends React.Component {

    render() {
        return <div className="search-text">
            搜索文字的内容<img src={ logo } />
        </div>;
    }
}

ReactDOM.render(
    <Search />,
    document.getElementById('root')
);



解析css、less、sass=======================================================================
npm install style-loader css-loader --save-dev

import React from 'react';
import ReactDOM from 'react-dom';
import './search.less';

class Search extends React.Component {

    render() {
        return <div className="search-text">
            搜索文字的内容<img src={ logo } />
        </div>;
    }
}

ReactDOM.render(
    <Search />,
    document.getElementById('root')
);

{ test: /.css$/, use: ['style-loader', 'css-loader'] }


npm install less-loader --save-dev
{ test: /.less$/, use: ['style-loader', 'css-loader', 'less-loader'] }




import logo from './images/logo.png';
import './search.less';


解析图片
{ test: /.(png|svg|jpg|gif)$/, use: ['file-loader'] }

import logo from './images/logo.png'
<img src={logo} />

解析字体
{ test: /.(woff|woff2|eot|ttf|otf)$/, use: ['file-loader'] }
@font-face {
  font-family: 'xxx';
  src: url('./xxx');
}

// 图片较小时，变成base64
{
  test: /.(png|svg|jpg|gif)$/,
  use: [{
    loader: 'file-loader',
    options: {
      limit: 10240
    }
  }]
}

文件监听：
webpack开启监听之后 webpack --watch只是能够自动构建
热更新负责在webpack构建之后不刷新浏览器进行更新
webpack-dev-server --open
const webpack = require('webpack')
plugins: [
  new webpack.HotModuleReplacementPlugin()
],
devServer: {
  contentBase: './dist',
  hot: true
}


除使用HotModuleReplacementPlugin实现热更新之外，还可以自己启一个node服务，将webpack-dev-middleware作为一个中间件放到express服务器中
const express = require('express');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev- middleware');
const app = express();
const config = require('./webpack.config.js'); const compiler = webpack(config);
 app.use(webpackDevMiddleware(compiler, { publicPath: config.output.publicPath
}));
app.listen(3000, function () {
 console.log('Example app listening on port 3000!\n');
});

热更新原理
两个过程：
1、启动过程：课件1-2-A-B的路径