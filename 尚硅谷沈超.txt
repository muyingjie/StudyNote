分区表和操作系统无关，无论Windows还是Linux，都是建立在MBR分区表或GPT分区表的

只有MBR分区表才存在扩展分区、逻辑分区的概念，GPT分区表最大可支持128个分区，无需这些东西

每块硬盘最多有一个扩展分区

格式化操作的对象是分区
格式化的目的是为了写入文件系统，而不是为了清空分区，不同的文件系统之间对单个文件大小、分区大小、io速度的要求不同

每个分区中存储的每个文件都有各自的索引信息，每条索引又叫iNode，大小为128字节，索引包括iNode号、修改时间、创建时间、访问权限、从哪个block块开始保存

swap分区是给内核用的，普通用户无法访问，因此swap前没有/，即/swap是不对的，swap和/不是包含关系，swap分区和/根分区是处于并列地位的


防火墙：数据过滤（IP、MAC地址、端口号、协议类型、数据包中的数据）

ls命令所在路径是 /bin/ls

extundelete 可以实现rm -rf误删除文件的恢复

查看文件信息：stat命令

more 命令 分屏显示文件内容
less 命令 分行显示文件内容 上下键可以控制滚动
tail -f 监听文件内容 ctrl + c 可强制退出

软链接类似快捷方式
创建软链接文件：ln -s 源文件 软链接文件
注意：源文件必须要写绝对路径，不能用相对路径

cp命令使用 -a参数后，拷贝出来的文件和原来文件一模一样，包括最近修改时间都一模一样

可以通过man、info查看命令的帮助文档
man ls
info ls


u：所有者
g：所属组
o：其他人
给bcd文件的所有者添加执行权限
chmod u+x bcd

文件颜色是绿色不能代表该文件就可以执行，还要看当前用户是否有执行该文件的权限

给所属组，其他人添加写权限
chmod g+w,o+w bcd

减去权限
chmod u-x,g-w,o-w bcd

创建用户：
useradd user1
创建用户的时候，同时会生成一个同名的用户组

给用户密码：
passwd user1

修改所属组：
chgrp

修改所有者和所属组：
把bcd文件的所有者改为user1
chown user1 bcd

把bcd文件的所有者和所属组改为root
chown root:root bcd

权限对文件的作用：
读：可以对文件执行cat more less head tail
写：可以对文件执行vim echo
注：对文件有写权限，并不意味着可以删除文件，必须对上一级目录有写权限时，才可以删除该文件

权限对目录的作用：
读：ls
写：可以在目录下执行touch rm cp mv等
执行：可以进入目录

普通用户不能修改文件的所有者，即使属于他的文件也不可以修改，只有root用户才可以

对一个文件拥有写权限，并不代表可以删除这个文件
因为这个文件的索引信息中只有iNode号、修改时间、创建时间、访问权限、从哪个block块开始保存这些信息，而没有存储文件名，文件名是放在父级目录block中的，父级目录的block就是存里面的文件或文件夹的文件名、iNode的，形式为文件名-iNode号映射存储，因此想要删除一个文件，必须对它的父级有写权限

以此类推，根目录也有自己的iNode，也有block块，它的block块中也存着子目录的iNode-文件或目录名的映射，那根目录的iNode-文件名映射在哪存呢？答案是根目录的iNode是固定的，永远都是2

Linux中的6种权限：
1、基本权限（rwx）
2、umask默认权限
还有4种以后再说

每新建一个文件，都会有默认的权限，这个权限叫umask默认权限
umask 指令：查询当前系统的umask默认权限
umask的结果有4个数：
0022 // 第1个数字可以先忽略

需要先了解一下新建文件和目录的默认最大权限：
对文件来讲，新建文件的默认最大权限是666，没有执行权限，因为Linux认为执行权限对文件来说比较危险，必须用户手工赋予
对目录来讲，新建目录的默认最大权限是777，执行权限对于目录来讲只是进入，没啥风险

普通用户的UID > 500

/etc/profile 中可以修改配置
待看：29-39

40、网络命令
配置IP地址：
vi /etc/sysconfig/network-scripts/ifcfg-eth0
重启网络服务
service network restart

alias 命令查看所有别名

linux如果打了快照，可能会导致uuid冲突的问题（/etc/sysconfig/network-scripts/ifcfg-eth0中的UUID配置）
解决方案：
1、删除MAC地址行 vi /etc/sysconfig/network-scripts/ifcfg-eth0
2、删除MAC地址和UUID的绑定文件 rm -rf /etc/udev/rules.d/70-persistent-net.rules
3、重启Linux reboot

ping 10.2.2.122 -c 3 // 发3个包后，就停
ping -b -c 3 192.168.103.255 // 探测103网段中有多少可以通信的主机

netstat -tuln // 网络状态查看命令，既可以查看本机开启端口，也可以查看有哪些客户端连接
Proto 网络连接协议
Recv-Q 接收数据队列
netstat -tulnp // p参数可以查看是哪个进程开了这个端口

netstat -rn 查看路由表 路由表的最后一条就是网关

41、网络命令
w命令 查看当前登录的系统有哪些人
TTY一列的意义：值为tty的是本机终端，值为pts/2、pts/3... 的是远程终端

write 命令给用户发信息
write user1 pts/1 回车输入若干信息之后 ctrl + d 确认发送

wall 命令给所有用户发信息
wall "要发送的信息"

42、系统痕迹命令
Linux中有一些痕迹文件：
/var/log/wtmp
/var/run/utmp
/var/log/btmp
/var/log/lastlog
这些文件无法直接查看，但可以通过下面一些方式查看：
who命令和w作用一样，但信息比w更简单
last命令，查看系统所有登录过的用户的信息，包括正在登录的用户和之前登录的用户
lastlog 查看所有用户的登录信息，会有大量用户显示从未登录过，这些用户是Linux中的伪用户，这些伪用户对应Linux中特定的服务，不可以随便操作
lastb 查看错误的登录信息，哪些人登录了，但没登进来

43、挂载命令
挂载的本质：将已存在的设备名（类似/dev/hda1 /dev/sda1等，在Linux装完之后就会存在，这类已经存在的空目录叫挂载点）和空目录建立连接
mount命令不加任何参数：查看当前挂载信息
光盘挂载：
mount -t iso9660 /dev/cdrom /mnt/cdrom/
光盘卸载：
umount /dev/sr0
umount /mnt/cdrom

44、挂载U盘
mount -t vfat -o iocharset=utf8 /dev/sdb1 /mnt/usb
其中 -o是指定额外参数，它的值iocharset代表手工指定挂载后显示的字符编码为中文

45、自动挂载
# 查询系统中已经挂载的设备，-l会显示卷标名称
mount -l
Linux启动时，会依据配置文件/etc/fstab的内容，自动挂载
由于该文件非常重要，所以系统提供了mount -a 这个命令来检测/etc/fstab格式是否正确

46、挂载NTFS分区
Linux和Unix对NTFS分区的识别很差，例如Mac无法识别NTFS分区的移动硬盘，即使能识别也是只读的

Linux驱动加载顺序：
1、驱动直接放入系统内核中，这种驱动主要是系统启动加载必须的驱动，数量很少
2、驱动以模块的形式放入硬盘，大多数驱动都以这种方式保存，保存位置在：
/lib/modules/3.10.0-xxxxxxxxxxxxxxx/kernel/中
3、驱动可以被Linux识别，但系统认为这种驱动一般不常用，默认不加载，如果需要加载这种驱动，需要重新编译内核，NTFS文件系统的驱动属于这种情况
4、硬件不能被Linux内核识别

Linux中只有两种包：源码包和二进制包
centos中二进制包有两种安装方式——手工安装（通过rpm命令）、yum安装
yum只是一种安装方式，解决了RPM安装过程中的包依赖问题

service httpd start 启动时默认寻找/etc/in.d/init.d/httpd 或/etc/init.d/httpd，/etc/init.d/httpd实际上是/etc/in.d/init.d/httpd的软连接

服务器静态文件存放目录：/var/www/html/

配置文件目录：/etc/httpd/conf/httpd.conf

导入数字证书很重要 视频第59节，文档在“软件包管理”一章中

添加yum源：
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

用户及权限管理===========================
68、用户管理介绍
/etc/passwd 用户文件，每行代表一个用户
root:x:0:0:root:/root:/bin/bash
以冒号分隔

69、
passwd中只有表示密码的标志，真正的密码在/etc/shadow中，/etc/shadow的权限是000
/etc/group是组信息文件

root:x:0:0:root:/root:/bin/bash
以冒号分隔，各列代表的含义分别是：
用户名:密码位:用户ID:组ID:用户说明:用户家目录:登录shell

其中用户ID一列：
0：超级用户UID，如果用户UID是0，代表这个账号是管理员账号，Linux中可以将其他用户的UID改成0将其提升为管理员
1-499：系统用户（伪用户）UID，这些UID是系统保留给系统用户的UID，即UID是1-499范围的用户是不能登录系统的，而是用来运行系统或服务的，其中1-99是系统保留的账号，系统自动创建。100-499是预留给用户创建系统账号的
500-65535：普通用户UID
注：NFS比较特殊，它也是系统用户，但它占用的UID是65534

理论上，所有服务都需要有自己的伪用户，例如Apache装完后，在它的配置文件中，会有User和Group两个配置，这两个配置就是Apache这个用户的用户名和所属组

GID添加用户时，如果不指定用户所属的初始组，那么会建立和用户名相同的组

用户组分为初始组和附加组
每添加一个用户，都会同时添加一个和用户名同名的初始组

Linux判断用户权限是通过用户的uid来判断的，如果把普通用户的uid改为0，则该用户就会拥有root权限，也就是说我们可以修改
user1:x:500:500::/home/user1:/bin/bash
中的第3列为0，则该用户的操作就和root一样了

每添加一个用户（例如u1），系统会在该用户的家目录（/home/u1）下，将/etc/skel中的内容拷贝一份过去，因此/etc/skel被称为用户的模板目录

正常情况下每添加一个用户（useradd），就需要给用户设置密码，否则用户无法登陆
但安装服务（例如MySQL）时生成的用户通常不添加密码，因为我们不需要让这个用户登陆

1-499的用户家目录不起作用

===========================

分配权限时，首先要搞明白要赋予权限的所有者、所属组是谁
例如某公司给员工分配权限，所有人将日报提交至/www/这一目录下
假设/www/的所有者属于某一领导a，有u1、u2、u3...u50，50位员工
每位员工应该给770权限，这样就可以在这个目录中新建、修改、删除文件了
但问题是u1也可以修改u2、删除u2的文件了，我们之后会有其他权限机制阻止这种操作

70、用户和权限 /etc/shadow
shadow文件中，各列的意义：
用户名:sha512算法加密过后的密码:更新密码的时间戳:两次密码修改的最小时间间隔（和第3列字段相比）:密码有效期（和第3列字段相比）:到期前的警告天数（和第5列字段相比）:密码到期后的宽限天数（和第5列字段相比）:密码失效时间（强制到期时间）:保留字段

有些用户的密码一列是双感叹号或*，这些用户没有密码，无法登录

71、用户和权限 /etc/group
组名:组密码位:GID:此组中支持的其他用户，附加组是此组的用户
组密码文件 /etc/gshadow
用户模板目录 /etc/skel
每添加一个用户，就会在home目录下生成该用户的家目录，家目录下默认会有一些隐藏文件，这些隐藏文件通常以skel为模板生成

添加用户命令：useradd，实际上就是往上面的几个/etc下的用户、组相关的目录中添加内容

72、添加用户
useradd
参数：
g 指定初始组，用的很少
G 指定附加组：
# 创建p2用户，它的初始组是p2，并把p2加到附加组t1中
useradd -G t1 p2

useradd控制默认值的文件: /etc/default/useradd
/etc/login.defs: 
MAIL_DIR: 指定新建用户的默认邮箱位置
PASS_MAX_DAYS: 指定密码的有效期
PASS_MIN_DAYS: 两次密码修改的间隔时间
PASS_MIN_LEN
PASS_WARN_AGE 密码修改到期前的警告天数
UID_MIN
UID_MAX
GID_MIN
GID_MAX
CREATE_HOME
UMASK
USERGROUPS_ENAB
ENCRYPT_METHOD

设置密码
passwd

73、passwd
passwd命令不加参数就是修改当前用户的密码

passwd -l user 锁定user用户
passwd -u user 解锁user用户

更改用户lamp的密码
echo "123" | passwd --stdin lamp

将密码修改日期归零（shadow的第3字段）
chage -d 0 lamp

用户信息修改usermod
将user2加入到user1组里
usermod -G user1 user2

74、userdel su
-r参数代表删除用户的同时，删除用户的家目录
userdel user1 -r

切换用户，注意中间的“-”必须要有，否则的话env里面的环境变量USER不会改变
su - user1

75、groupadd groupdel
组的添加和删除：groupadd groupdel
将user1加入到组group1中
gpasswd -a user1 group1
将user1从组group1中删除
gpasswd -d user1 group1

76、newgrp
如果user2存在于两个组中（user2 user1），默认情况下user2建的文件，所有者和所属组都是user2
如果希望默认新建的文件的所属组改为user1，可以使用newgrp user1来更改

77、acl权限
每个文件只能有1个所有者，1个所属组，剩下的都是其他人
但有时候需要在其他人这个大的身份中做更细粒度的区分

78、acl权限
acl权限默认情况下是开启的
可以通过dumpe2fs -h /dev/sda3 来查看指定分区详细文件系统信息的命令，从输出中可以看到是否开启
如果没有开启，可以通过：
方法一：mount -o remount,acl / 来开启（临时生效）
方法二：vi /etc/fstab 永久开启

acl的使用
setfacl -m u:st:5 /www/ 给st用户的www目录权限设置为5
-R 参数，作用是递归
但递归只是对当前已存在的文件的权限生效，如果希望对之后创建的文件也生效可以在-m参数的值前面加上d：
setfacl -m d:u:st:5 /www/

可以通过getfacl /www/ 查看acl权限

79、acl权限
给目录acl权限之后，ll看到的权限就不太准确了，需要通过getfacl来查看比较准确的权限

acl权限的缺陷：权限溢出，如果给了用户5的权限，那目录下的所有文件都有执行权限，比较危险

80、sudo权限 给普通用户赋予部分管理员权限
/sbin/和/usr/sbin/目录下的命令只有超级用户才能使用

visudo命令 赋予普通用户权限命令，执行之后和vi打开一个文件的效果一样，支持通过vi对文件进行操作

授权普通用户user1有重启服务器的权限
visudo之后，在文件中添加：
user1   ALL=/sbin/shutdown -r now
这一行代表允许user1以root身份在输入指令的时候重启

这样设置之后，普通用户登录之后，可以通过sudo -l查看自己有权限操作哪些指令
可以通过sudo /sbin/shutdown/ -h now来重启服务器

81、sudo权限
user1   ALL=/etc/rc.d/init.d/httpd configtest
允许通过vim修改httpd.conf配置文件
user1   ALL=/usr/bin/vim /etc/httpd/conf/httpd.conf

82、sudo权限
允许user1添加用户
user1   ALL=/usr/sbin/useradd
允许user1修改密码，但不可以修改root的密码，这个写法很复杂，遇到这种复杂的写法一定要看官方给的例子
user1   ALL=/usr/bin/passwd [A-Za-z]*,  !/usr/bin/passwd "",  !/usr/bin/passwd/ root

83、SetUID、SetGID、Sticky BIT 不建议用户使用

89、文件系统管理
每个扇区大小都是512Byte
CPU数据处理的速度在TB级别每秒，而硬盘只有MB级别每秒

90、Linux文件系统特性
超级块：记录整个文件系统的信息，包括block和iNode的总量，已经使用的、未使用的iNode和block的数量，block和iNode的大小，文件系统的挂载时间，最近一次的写入时间，最近一次磁盘检验时间等
dumpe2fs -h /dev/sda1 只查看sda1分区信息
dumpe2fs /dev/sda1 查看块组信息

数据块(data block)：存储具体的文件内容的结构

iNode号：每个文件都占用一个iNode号

Linux文件系统：
ext4
xfs

91、常用的硬盘管理命令
查看分区占用空间信息（会包含临时文件、删除产生的没有释放的垃圾文件等，所以有时会和du -sh看到的结果差距很大，重启服务器后二者的数据就会保持一致）：
df -ahT
统计文件和目录大小
du -sh
h参数是人性化显示
s参数是sum的意思
注：ll -h不可以看到目录下所有文件的总大小，那个大小记录的是iNode所占用的空间
du统计的文件大小是准确的，df统计的剩余空间是准确的

可以通过lsof | grep deleted查询被删除的文件，然后挨个手动kill掉（不推荐）

92、
fsck -y /dev/sdb1 文件系统修复命令 几乎不用
stat test.sh 查看test.sh这个文件的详细时间 几乎不用

file xxx.cfg 查看文件类型
type mkdir 查看命令的类型

93、
fdisk命令手工分区
fdisk -l 查看系统所有硬盘及分区
复制镜像时，可能需要重置UUID（唯一标识符）

手动分区命令：fdisk /dev/sdb 注意sdb后面没有1 2 3这些数字，因为我们的目的就是要分区，如果有了数字，是分好后的结果

格式化：
mkfs -t ext4 /dev/sdb1
mkfs -t ext4 /dev/sdb5
注意，sdb2是扩展分区，扩展分区不能写入数据也不能格式化，只能包含逻辑分区

建立挂载点：
mkdir /disk1
mkdir /disk5

挂载:
mount /dev/sdb1 /disk1
mount /dev/sdb5 /disk5

94、硬盘自动挂载
上一集中讲的分区分好之后，理论上来讲，大小不可以调整
硬盘自动挂载主要依赖/etc/fstab文件
fstab文件中的UUID就代表诸如/dev/sdb1 /dev/sdb2这样的一个个分区
可以通过dumpe2fs /dev/sdb5 或者 ls -l /dev/disk/by-uuid/ 来查看UUID
挂载完成后，需要将上面查看到的UUID添加到/etc/fstab文件中：
UUID=xxxxxxxxxxxxxx /disk1 ext4 defaults 1 2
各列含义：设备文件名 挂载点 文件系统 挂载选项 是否可以备份 是否检测磁盘fsck
注：设备文件名除了写成UUID=xxxxxxxxxxxxxx这样的形式，也可以写成/dev/sdb1这样的形式
0 不备份 1 每天备份 2 不定期备份
0 不检测 1 启动时检测 2 启动后检测 通常根分区设置为1 其他分区设置为2

95、
96、parted命令
Linux系统中有两种常见的分区表：MBR分区表和GPT分区表（GUID分区表），其中：
MBR分区表：支持的最大分区是2TB，最多支持4个主分区，或3个主分区1个扩展分区
GPT分区表：最大支持18EB的分区，最多支持128个分区，其中1个系统保留分区，127个用户自定义分区

parted /dev/sdb 进入分区交互界面，可以通过约定的指令进行分区，注意sdb后面没有1 2 3等数字

两种分区方法：fdisk、parted
如果要分比较大的容量的分区，只能用parted


97、swap分区
free -h 查看内存使用情况和总量
free的结果中：
buffers列（缓冲） 加快硬盘写速度
cached列（缓存）  加快硬盘读速度

mkswap /dev/sdb1 格式化为swap文件系统

98、磁盘配额
查看Linux内核是否支持磁盘配额
grep CONFIG_QUOTA /boot/config-2.6.32-642.e16.x86_64

概念：
用户配额和组配额 组配额基本不用
限制用户和用户组使用磁盘空间和文件个数
软限制和硬限制 软限制是警告 硬限制是强制
宽限时间 如果在宽限时间内一直处于软限制范围内，则会自动升级为硬限制，换句话说，不可以长时间一直处于软限制和硬限制之间的状态

99、
磁盘配额主要用来限制普通用户的分区使用情况的，把握住两点：普通用户、分区
在分区上开启磁盘配额功能
mount -o remount,usrquota,grpquota /disk 重新挂载/disk分区，并加入用户和用户组的磁盘配额功能，临时生效

如果想要永久生效，需要修改/etc/fstab文件：
vi /etc/fstab
/dev/sdb1 /disk ext4 defaults,usrquota,grpquota 0 0
改完配置文件后如果想要生效，必须重启系统，否则也需要把分区重新挂载一遍

建立磁盘配额配置文件（必须先关闭SELinux）
quotacheck -avug

关闭SELinux：
getenforce 查看SELinux是否生效，结果为Enforcing的话就是生效，Permissive是不生效，但会发出警告
setenforce 0 关闭SELinux，临时生效

永久关闭SELinux，需要修改/etc/selinux/config，将里面的SELINUX=enforcing改为disabled

检测是否生效：ls /disk/，如果能找到aquota.user文件，就代表生效了，如果同时开启了组配额，也会生成aquota.group文件

设置用户和组的配额限制
edquota -u user1 给用户设定配额
注意：该命令会打开一个文件，这个文件中的blocks和inodes两列不可以修改，这是系统默认检测出来的，只能修改blocks和inodes后面的soft、hard这些列，soft、hard就是对应的软限制、硬限制

quotaon -avu 启动或关闭配额
-a 依据/etc/mtab 文件启动所有的配额分区。如果不加-a，后面就一定要指定分区名
-u 启动用户配额
-g 启动组配额
-v 显示启动过程信息

quota -uvs 查询用户或用户组配额
-u 用户名
-g 组名
-v 显示详细信息
-s 以习惯单位显示容量大小

repquota -avus [分区名] 查询分区的配额

测试
dd if=/dev/zero of=/disk/testfile bs=1M count=60 往testfile里写60MB

100、
复制配额：
edquota -p user1 -u user2
-p 原用户
-u 目标用户

修改宽限时间：
edquota -t

非交互式设定用户磁盘配额
setquota -u 用户名 容量软限制 容量硬限制 个数软限制 个数硬限制 分区名
setquota -u user4 10000 20000 5 8 /disk

101、LVM逻辑卷
Logical Volume Management
物理卷（Physical Volume 简称PV）是真正的物理硬盘或分区
卷组（Volume Group 简称VG）将多个物理卷合起来就组成了卷组，组成同一个卷组的物理卷可以是同一个硬盘的不同分区，也可以是不同硬盘的不同分区。可以把卷组想象成一个逻辑硬盘
逻辑卷（LV logical Volume）卷组是一个逻辑硬盘，硬盘必须分区之后才可以使用，这个分区我们称之为逻辑卷，逻辑卷可以格式化和写入数据，可以把逻辑卷想象成分区

常规操作：先把物理硬盘或分区变成物理卷，再把物理卷组装成卷组（卷组可以动态调整大小，当卷组不够时可以再来一块硬盘，将硬盘做成物理卷加到卷组中），在卷组中分成一个个逻辑卷，每个逻辑卷就可以作为我们实际使用的分区，所以也可以对逻辑卷格式化和挂载

逻辑卷中有个概念叫物理扩展（PE Physical Extend）PE是用来保存数据的最小单元，我们的数据实际上都是写入PE当中，PE大小是可以配置的，默认是4MB
普通分区的大小，单位是柱面
逻辑卷的大小，单位是PE

102、
boot分区不可以是逻辑卷分区，必须是/dev/sda1这种形式的普通目录
剩余的空间可以变成逻辑卷

103、通过命令行进行LVM逻辑卷分区
第1步：准备分区，需要注意分区的系统ID不再是Linux默认的分区ID号83了，而要改成LVM的ID号8e
fdisk /dev/sdb
第2步 建立物理卷
pvcreate /dev/sdb 将整块硬盘建立为物理卷
pvcreate /dev/sdb5 将sdb5分区建立为物理卷
pvscan 查看物理卷
pvdisplay 查看到物理卷更详细的信息
pvremove 删除物理卷
第3步 创建卷组
vgcreate -s 8MB myjvg /dev/sdb5 /dev/sdb6
-s 选项是PE指定大小，通常无需设置，之后跟着的是卷组名，后面可以再跟若干物理卷名
vgscan
vgdisplay 查看卷组信息
vgextend myjvg /dev/sdb7 将sdb7这个物理卷加到myjvg这个卷组，对myjvg卷组扩容
vgremove myjvg 删除卷组
第4步 建立逻辑卷
lvcreate -L 1.5G -n myjlv myjvg -L参数指定容量 -n参数指定逻辑卷名 -l参数指定个数（-l是按照PE个数指定容量大小，比较麻烦，需要换算，很少用）
mkfs -t ext4 /dev/myjvg/myjlv 格式化
mkdir /testlv && mount /dev/myjvg/myjlv /testlv 挂载
df -h
lvscan
lvdisplay 就可以查看到逻辑卷信息
上述操作是临时生效的，永久生效需要修改/fstab文件
lvresize -L +1G /dev/myjvg/myjlv 给myjlv这个逻辑卷增加1G容量
-L 也可以不写+或-，直接写数字，就代表扩容到这个数字大小的容量
执行完lvresize之后，再执行以下resize2fs /dev/myjvg/myjlv 才可以 在df -h中看到最新的容量信息

104、
linux用的shell是bash

105、
如果输出没有空格的一串符号，直接echo 11111111111 即可
如果输出有空格的一串符号，要加引号：echo "1111111   1111"

echo -e "\\" 加上-e参数，可以输出转义字符
echo -e "\a" 可以输出提示音

106、
#!/bin/bash bash中的第1行，叫bash bang，用于指示操作系统使用哪个解释器来解析文件的其余部分

执行shell文件的步骤：
1、赋予执行权限 chmod 755 hello.sh
2、/root/hello.sh 或 ./hello.sh 以绝对路径或相对路径方式执行

通过bash命令也可以执行shell脚本，而且不用给文件赋执行权限
bash hello.sh

shell
echo打印时，如果想要输出!，后面必须加空格
echo "1111! "

107、
history命令会把历史命令被记录在~/.bash_history文件中，写入时机是用户退出，也就是说，在用户logout退出Linux时，会自动将使用过的命令保存在~/.bash_history中，下次登录的时候还可以用
如果是强制关机，或意外关机导致的用户退出，history是不会往~/.bash_history里写入命令的
如果想要马上将历史命令更新到~/.bash_history中，可以通过history -w强制同步
注意：~/.bash_history是用户的家目录，所以这个操作是和用户相关的，用户做该操作之后保存的是自己使用过的历史命令
history -c 将内存和~/.bash_history中的历史命令全部清空

输入 !39 执行history列表中第39条命令
!! 执行上一条命令，和摁上箭头键是一个效果
!字符串 重复最后以该字符串开头的命令
!$ 重复上一条命令最后一个参数

alias命令查看别名

在~/.bashrc中可以定义别名
执行source ~/.bashrc命令，不需要重启，可以直接生效
如果希望永久生效，需要将别名写入环境变量配置文件 ~/.bashrc中

. 点命令，就是source命令，即 . ~/.bashrc 和 source ~/.bashrc是一样的

108、
Ctrl + U 删除或剪切光标之前的命令
Ctrl + K 删除或捡钱光标之后的命令

输入输出重定向
bash的标准输入输出
设备 设备文件名   文件描述符  类型
键盘 /dev/stdin 0         标准输入
显示器 /dev/stdout 2         标准输出
显示器 /dev/stderr 2         标准错误输出

输出重定向：
命令 > 文件 // 直接覆盖
命令 >> 文件 // 追加
错误命令 2> 文件
错误命令 2>> 文件

使用2> 和 2>> 的前提是我们知道自己输入的指令是错误的，意义不大

所以，更常用的是：
命令 >> 文件 2>&1
命令 &>> 文件

命令 > 文件 2>&1
命令 &> 文件

命令 >> 文件1 2>> 文件2 正确的输出写到文件1，错误的输出写到文件2

输入重定向 很少使用

109、
多命令执行可以用 ; && || 连接
; 连接的多条命令，没有逻辑关系，即使第1条命令报错，后面的命令也会执行，但&&要求前面的命令正确执行之后才执行

ls || echo no && echo yes
lsdsdsdf || echo no && echo yes
注意：|| echo no 必须写在前面 && echo yes 必须写在后面

grep [选项] "搜索内容" 文件名
-A 数字 列出符合条件的行，并列出后续的n行
-B 数字 列出符合条件的行，并列出前面的n行
-c 统计找到的符合条件的字符串的次数
-i 忽略大小写
-n 输出行号
-v 反向查找
--color=auto 搜索出的关键字用颜色表示

110、
定义并初始化变量：name=sc
输出name变量的值：echo name

a=`date` 运行date命令之后，将其输出赋值给a

bash中特殊符号
单引号 '' 单引号中的所有特殊符号，如 $ 和 `，都没有特殊含义
双引号 "" 双引号中，$ ` \有特殊含义（调用变量的值、引用命令、转义符），其余特殊符号都无特殊含义
反引号 `` 反引号括起来的内容是系统命令，在bash中会先执行它，和$()作用一样，但推荐使用$()，看起来更清晰一些

111、
pstree可以查看进程树

依次执行如下命令：
name=sc
(name=lm;echo $name)  该命令输出lm
echo $name            该命令输出sc
小括号括起来的命令，会重新开一个子shell执行，子shell执行完后，会立刻退出，回到父shell，所以第3条命令输出的是sc

如果把命令放在大括号{}里面执行，那改的就是当前shell中的变量了，不会存在子shell
注：{}的第一个命令和左括号之间必须要有一个空格，最后一个命令必须要有分号，例如：
{ name=lm;echo $name;}
实际上写大括号和不写大括号都是一个效果，都是在当前shell执行，所以用的很少

112、
shell变量的默认类型时字符串型，如果要进行数值运算，则必须指定变量为数值型
shell中变量名和值之间不可以有空格 name=myj 如果加了空格：name = myj shell会认为name是一个命令，后面跟一个空格后就会继续寻找它的参数

基于旧变量赋值新变量：
test=123
test="$test"456
echo $test // 得到123456
test=${test}789
echo ${test} // 得到123456789

113、
环境变量分为系统环境变量、用户自定义的环境变量
除此之外，地位等同于环境变量的变量类型有位置参数变量、预定义变量
环境变量主要写在 /etc/profile中

114、
shell中变量定义时，变量名前面不需要加$，但调用的时候变量名前必须加$
set -u // 执行该命令后，调用没有初始化的变量，会报错，但该命令只是临时生效，重启机器后就不生效了
永久生效需要将set -u写到上面的配置文件中
set不加任何参数用来查看系统的环境变量，可以看到自定义的环境变量
env也能看到一部分环境变量，不能看到自定义的环境变量
unset 变量名 删除变量名，注意变量名前面不需要加$

115、
变量类型：
  用户自定义变量： 名称、作用、内容都是自定义
  环境变量：
    用户自定义环境变量：名称、作用、内容都是自定义
    系统自带环境变量：名称、作用都是确定的，内容是自定义
  位置参数变量：名称、作用都是确定的，内容是自定义
  预定义变量：名称、作用都是确定的，内容是自定义

用户自定义变量 和 用户自定义环境变量 的区别：
环境变量在一系列shell中，父、子shell中都能看到
但用户自定义变量，在子shell中看不到，只能在它被定义的那个shell中看到

声明环境变量时前面要加上export，用来和声明普通变量作区分
export age="18"
或者：
age="18"
export age

116、
PATH也是变量，只不过它是系统自带的环境变量，所以可以通过echo $PATH输出
PATH="$PATH":/root/sh 将sh脚本所在目录加到PATH环境变量中

117、
echo $PS1 // PS1变量表示当前命令提示符的展示内容
直接修改PS1的值只是临时生效，如果想要永久生效，需要修改/etc/bashrc文件

/etc/sysconfig/i18n 定义系统默认语系

118、
位置参数变量：
#!/bin/bash
# 变量a接收第1个参数
a=$1
# 变量b接收第2个参数
b=$2
# shell中的表达式要用双小括号括起来
sum=$(( $a + $b ))
echo $sum
echo $0

在终端执行：
sh count.sh 22 33
之后，就可以得到结果55
$0代表命令本身，例如这里就输出了./count.sh

119、
位置参数变量：
para.sh文件：
#!/bin/bash

echo "\$* is $*"
echo "\$@ is $@"
echo "\$# is $#"

执行./para.sh 11 22 33 44之后，会输出
$* is 11 22 33 44 # 输出所有参数，但把所有参数看成一个整体，即$*可以看成一个变量，这个变量的值是 11 22 33 44
$@ is 11 22 33 44 # 输出所有参数，但会把每个参数单独赋给$@
$# is 4 # 参数个数

para2.sh文件：
#!/bin/bash

for i in "$*":
  do
    echo $i
  done
echo "========="
for y in "$@":
  do
    echo $y
  done

输出结果：
11 22 33 44
=========
11
22
33
44

120、预定义变量
$? 最后一次执行命令的返回状态，如果这个变量的值为0，证明上一条命令正确执行，如果这个变量的值为非0，则为错误
$$ 当前进程进程号pid
$! 后台运行的最后一个进程的进程号

121、
# 接受键盘输入，并将输入保存到变量num1中
# t参数，意思是等待30s
read -t 30 -p "please input a num1: " num1

122、
shell中的变量类型只有：字符串、数字、数组
a=1
b=2
c=$a+$b
echo $c # 会得到1+2

declare -i c=$a+$b
echo $c # 会得到3

# 声明name变量，并给第0项赋值aa
declare -a name[0]="aa"
# 也可以省略掉declare -a
name[1]="bb"
# 查看数组中所有的值
echo ${name}

export命令和declare -x原理一样，都是声明环境变量

declare - 给变量设定类型属性
declare + 给变量取消类型属性

123、
shell中的数值运算
方法一：通过declare将变量声明为数值型
a=11
b=22
declare -i c=$a+$b # 通过-i参数声明为数值型
echo $c

方法二：
a=11
b=22
d=$(expr $a + $b) # 加号两侧必须都有空格
echo $d

let e=$a+$b
echo e

方法三：推荐
gg=$(( $aa+$bb ))
echo $gg
双小括号也可以用[]来代替，但不推荐
ff=$[ $aa+$bb ]

124、
# 中括号代表条件测试
# exit代表脚本退出执行
[ "$oper" == "+" ] && echo "$(( $num1 + $num2 ))" && exit

125、
变量测试：
# 通过x的值来测试z的值到底是没有定义、是空字符串、还是有定义？
x=${z-new}
# 如果echo $x输出的是new，证明z没有定义过
# 如果echo $x输出的是空，证明z是空字符串
# 如果echo $x输出的是其他值，例如123，证明z已经定义过，且值为123
echo $x

126、
source 配置文件 或 . 配置文件，用来加载环境变量配置文件，以避免重新登录生效

Linux中的环境变量配置文件：
/etc/profile
/etc/profile.d/*.sh
~/.bash_profile
~/.bashrc
/etc/bashrc

放在etc目录下的，对所有用户生效，放在家目录的，对当前登录用户生效
环境变量配置文件调用过程：
/etc/profile -> ~/.bash_profile -> ~/.bashrc -> /etc/bashrc -> 命令提示符
  ↓                                                   |
/etc/profile.d/*.sh ←---------------------------------|
  ↓
/etc/profile.d/lang.sh
  ↓
/etc/sysconfig/i18n

用户正常登录情况下，会从/etc/profile开始（上图左上角），分别沿着右边和下边两个方向加载配置文件（下方的路线加载完之后就会和上方的配置一起做合并，共同在终端生效），最终到达命令提示符

当通过su root切到root账户下，或父shell开启子shell的时候，会以/etc/bashrc这个文件为入口加载（即上图中右侧那条路径）

127、
用户退出时如果通过执行logout命令退出（注意必须是通过logout命令退出，直接关掉终端不会调用配置文件），会调用一个环境变量配置文件（只有这一个） ~/.bash_logout

~/.bash_history 保存了历史命令

/etc/issue /etc/issue.net 用户登录之前显示欢迎信息 issue文件支持转义符 issue.net不支持 其次，ssh远程登录是否显示/etc/issue.net文件中的欢迎信息，是由ssh的配置文件（/etc/ssh/sshd_config）决定的，需要在/etc/ssh/sshd_config文件中添加Banner /etc/issue.net
/etc/motd 是用户正确登录之后显示欢迎信息
/etc/motd文件中的欢迎信息，不论是本地登录，还是远程登录都可以显示

stty -a 查询系统中定义的快捷键
stty intr ^p 修改intr的快捷键为^p

128、
注意正则和通配符的区别：
正则：用来在文件中匹配符合条件的字符串
通配符：用来匹配符合条件的文件名
所以在文件中搜索字符串的命令，如grep awk sed支持正则
而搜索字符串的命令，如ls find cp不支持正则，只能使用通配符去匹配

shell中正则分为基础正则和扩展正则，grep只可以使用基础正则，egrep才可以匹配扩展正则

grep a* test.txt # 会匹配所有行，因为每一行一定匹配a*（0个a或多个a）
.* 匹配任意内容
grep -v "^$" test.txt 筛选出非空白行，-v用来取反

129、
grep "a\{3,\}" test.txt # 在test.txt找3个a或3个以上a的行

# 先过滤不是root的用户行，然后再筛选出passwd最后一列是/bin/bash的用户
grep -v "root" /etc/passwd | grep "/bin/bash"

130、扩展正则
+ ? | () 在shell中是扩展正则
扩展正则必须使用egrep或者grep -E

131、
grep -E [0-9A-Za-z_]+@[0-9A-Za-z_]+\.[a-z] a.txt

132、
提取所有普通用户
-v 代表先获取没有root的行
grep -v "root" /etc/passwd | grep "/bin/bash"

cut用来提取列
提取student.txt中的第2、4列
cut -f 2,4 student.txt
cut命令不识别空格，只识别tab
先通过grep去掉包含Name的行，再用cut提取列
grep -v "Name" student.txt | cut -f 2,4 student.txt

提取所有用户的用户名和id号
cut -d ":" -f 1,3 /etc/passwd

提取所有普通用户的用户名和id号
grep "/bin/bash" /etc/passwd | grep -v "root" | cut -d ":" -f 1

133、
如果student.txt中有3列，则会按printf参数中的格式输出
printf '%s\t %s\t %s\t \n' $(cat student.txt)
也可以把字符串按照一定格式输出
printf '%i\t %i\t %i\t \n' $(cat student.txt)
不输出包含Name的行
printf '%i\t %i\t %i\t \n' $(cat student.txt | grep -v Name)

134、
输出第2列和第6列
awk '{printf $2 "\t" $6 "\n"}' student.txt
awk '{print $2 "\t" $6 ""}' student.txt
printf必须手动加换行符才可以实现换行

先提取包含dev/sda3的行的第5列（第5列是一个百分比，例如12%），之后再以%作为分隔符，提取第1列，就得到了dev/sda3分区的占比
df -h | grep "dev/sda3" | awk '{printf $5}' | cut -d "%" -f 1

135、
在打印数据前，BEGIN后面的printf "begin\n"会执行，END同理
awk 'BEGIN{printf "begin\n"} {printf $2 "\t" $6 "\n"}' student.txt

如果第6列大于86，再打印
grep -v "Name" student.txt | awk '$6 >= 86 {print $2}'

awk中$0代表整行，$1代表第1列，以此类推

如果第2列包含Sc这个字符串，则打印第6列，注意这里的/Sc/和正则没关系
awk '$2 ~ /Sc/ {printf $6 "\n"}' student.txt

~代表包含，!~代表不包含

136、
grep "/bin/bash"可以得到能登录的用户，即超级用户和普通用户
FS是awk的内置变量，用来指定分隔符
cat /etc/passwd | grep "/bin/bash" | awk 'BEGIN{FS=":"} {print $1}'

如果整行中包含Liming这个字符串，则打印
awk '/Liming/ {print}' student.txt

137、
打印student.txt文件中的第2行，默认sed会把所有数据都打印出来，再把命令选中的内容（此处就是第二行的内容）打印出来
sed '2p' student.txt
如果只想打印命令选中的内容，需要加-n参数
sed -n '2p' student.txt
删除2 3 4行
sed '2,4d' student.txt
删除真实文件中的2 3 4行
sed -i '2,4d' student.txt
在第2行后追加一行，内容是1111111111
sed '2a 1111111111' student.txt
将1111111111加到真实文件中
sed -i '2a 1111111111' student.txt
和Linux的vi编辑器进入输入模式一样的道理，a是在行后添加，i就是在行前添加：
sed -i '2i 1111111111' student.txt
c的作用是替换，例如如下命令将把第3行内容替换为4444444
sed -i '3c 4444444' student.txt

138、
sort /etc/passwd 将passwd文件中所有行排序之后输出，默认按照第1个字母来排

sort -r /etc/passwd 反向排序

-t指定分隔符，-k指定起始终止列，按照选中的这些列来排，此处就是按照第3列来排
sort -t ":" -k 3,3 /etc/passwd

添加参数-n，按数字来排，而不是按字母顺序来排
sort -n -t ":" -k 3,3 /etc/passwd

uniq命令，取消重复行，参数和sort一样

wc统计文件信息

139、140、
test命令，可以判断文件是否存在、文件类型、文件权限，还可以判断两个文件之间的比较，例如比较修改时间
test -b ip.txt 判断ip.txt是否存在且为块设备文件
test命令还有一种格式 [ -b ip.txt ]

141、
test做数字判断：
# 如果50小于等于40，输出yes，否则输出no
[ 50 -le 40 ] && echo yes || echo no

test做字符串判断：
判断变量name是不是为空
[ -z "$name" ] && echo yes || echo no

aa=11
-a代表逻辑与，如果变量aa不为空，且aa大于23，输出yes，否则输出no
[ -n "$aa" -a "$aa" -gt 23 ] && echo yes || echo no

142、
/dev/sda3分区占比超过80%时报警
#!/bin/bash
aa=$( df -h | grep /dev/sda3 | awk '${print $5}' | cut -d "%" -f 1 )
if [ "$aa" -ge 80 ]
  then
    echo "11111111"
fi

143、双分支if
备份数据库
#!/bin/bash
# 同步系统时间
ntpdate asia.pool.ntp.org &>/dev/null
# 把当前系统时间按照 年月日 格式赋予变量date
date=$(date +%y%m%d)
# 统计mysql数据库大小，并把大小赋予size变量
size=$(du -sh /var/bin/mysql)

if [ -d /tmp/dbbak ]
  then
    echo "Date : $date!" > /tmp/dbbak/dbinfo.txt
    echo "Data size : $size" >> /tmp/dbbak/dbinfo.txt
    cd /tmp/dbbak
    # /dev/null 是系统自带的类似回收站的目录，用来屏蔽命令执行时的输出
    # 由于命令放在脚本中执行，所以不需要输出，所以需要屏蔽掉
    tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql_dbinfo.txt &>/dev/null
    rm -rf /tmp/dbbak/dbinfo.txt
  else
    mkdir /tmp/dbbak
    echo "Date : $date!" > /tmp/dbbak/dbinfo.txt
    echo "Data size : $size" >> /tmp/dbbak/dbinfo.txt
    cd /tmp/dbbak
    tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql_dbinfo.txt &>/dev/null
    rm -rf /tmp/dbbak/dbinfo.txt
fi

该脚本目前存在的问题：
1、只能将文件备份到本机，无法实现网络备份
2、只能完全备份，不能增量备份（需要mysqldump工具）

144、双分支if
监听Apache是否正常运行，如果异常就重启的脚本：
aa=$( netstat -tuln | awk '{print $4}' | grep ":80$" )
if [ "$aa" == "" ]
  then
    echo "http is down, must restart"
    /etc/rc.d/init.d/http start &>/dev/null
  else
    echo "http is ok"
fi

有时只判断服务是否存在不准确，需要判断80端口是否应答：
port=$(nmap -sT 192.168.4.210 | grep tcp | grep http | awk '${print $2}')
if [ "$port" == "open" ]

145、多分支if
#!/bin/bash
read -t 30 -p "please input a filename: " file
if [ -z $filename ]
  then
    echo "you don't input a file"
    # 定义返回值，且退出程序，执行该shell之后，通过echo $?就可以得到这个值
    exit 1
elif [ ! -e $filename ]
  then
    echo "the file you input doesn't exist"
    exit 2
elif [ -f $filename ]
  then
    echo "you have inputed a file"
elif
  then
    echo "you have inputed a directory"
else
  echo "$filename is other file"
fi

146、计算器案例
if [ -n "$num1" -a -n "$num2" -a -n "$ope" ]
  then
    test1=$(echo $num1 | sed 's/[0-9]//g')
    test2=$(echo $num2 | sed 's/[0-9]//g')
    # 判断test1和test2是不是空，如果是空，证明是数字
    if [ -z "$test1" -a -z "$test2" ]
      then
        if [ "$ope" === '+' ]
          then
          value=$(( $num1 + $num2 ))
        elif [ "$ope" === '-' ]
          then
          value=$(( $num1 - $num2 ))
        else
          echo "Please enter a valid symbol"
          exit 10
        fi
    else
      echo "Please enter a valid value"
      exit 11
    fi
else
  echo "qing shu ru nei rong"
  exit 12
fi
echo " $num1 $ope $num2 : $value "

147、case语句
read -t 30 -p "please input your choice: " cho
case $cho in
  "1")
    echo "beijing"
    ;;
  "2")
    echo "shanghai"
    ;;
  *)
    echo "error"
    ;;
esac

148、for循环
shell中的for循环的do、done可以类比其他语言的大括号{}
第一种语法：
for i in  2 3 4
  do
    echo $i
  done

第二种语法：
s=0
# shell中进行运算要用双小括号
for (( i=1;i<=100;i=i+1 ))
  do
    s=$(( $s+$i ))
  done
echo $s

dizhi566@gmail.com 加速度

149、批量解压，写法1
#!/bin/bash

cd /root/sh/tar

ls *.tar.gz > tar.log
# 多种扩展名的压缩文件，需要用>>追加写入tar.log中，而不能用>，>是会覆盖整个文件的
# &>/dev/null 可以去掉所有打印信息
ls *.tgz >> tar.log &>/dev/null
# 统计有多少行，并写入aa变量中
aa=$(cat /root/sh/tar/tar.log|wc -l)

for (( i=1;i<"$aa";i=i+1 ))
do
  # NR是awk当前正在处理的行
  bb=$(cat tar.log | awk 'NR=='$i' {print $1}')
  tar -zxvf $bb -C /root/sh/tar
done


批量解压，写法2
#!/bin/bash

ls *.tar.gz > tar.log

# cat既可以识别空格隔开、也可以识别换行隔开
for i in $(cat tar.log)
do
  tar -zxvf $i
done

rm -rf tar.log

150、判断合法ip

151、批量添加指定数量的用户
#!/bin/bash

read -p "Please input user name: " -t 30 name
read -p "Please input the number of users: " -t 30 num
read -p "Please input the password of users: " -t 30 pass

if [ ! -z "$name" -a ! -z "$num" -a ! -z "$pass" ]
  then
    y=$(echo $num | sed 's/[0-9]//g')

  if [ -z "$y" ]
    then
    for (( i=1;i<=$num;i=i+1 ))
      do
        /usr/sbin/useradd $name$i &>/dev/null
        echo $pass | /usr/bin/passwd --sdtin $name$i &>/dev/null
        # 强制用户登录之后改密码
        chage -d 0 $name$i &>/dev/null
      done
  fi
fi

152、批量删除伪用户
#!/bin/bash
# 过滤出所有伪用户，再把root用户去掉，再通过cut拿到所有用户名
name=$( cat /etc/passwd | grep "/bin/bash" | grep -v root | cut -d ":" -f 1 )
for i in $name
do
  userdel -r $i &>/dev/null
done


=========================================================

Windows的服务管理中有自动、手动、禁用状态，手动状态是当系统需要的时候不会询问管理员是否同意，而自动开启的意思，并不是需要用户手动开启的意思

ps aux 执行之后得到的结果中，tty一列很多都显示?，这些都是系统进程

防火墙可以过滤的有IP MAC地址 端口号 协议类型 数据包中的数据

25-28要看

ssh（Secure Shell）——应用层安全远程管理协议
ssh登录的两种验证方式：
1、账户密码验证：
客户端发送账户、密码到服务端，服务端通过查询/etc/passwd和etc/shadow来校验
2、密钥对验证
ssh客户端的3个秘钥：
客户端自己的公钥
客户端自己的私钥
服务器端的公钥

服务端的3个秘钥：
服务端自己的公钥
服务端自己的私钥
客户端的公钥

客户端开始时没有服务端的公钥，而服务端在创建的时候已经通过某种方式加入了客户端的公钥
客户端通过ssh连接服务端时，会将自己的公钥发送给服务端，服务端验证通过后登陆成功，并且将自己的公钥给客户端

VMware在安装时会在Windows宿主机上装一个虚拟网卡，这个虚拟网卡用来和虚拟机中的系统（例如Linux）进行通信

虚拟机在NAT模式下，会给虚拟机的宿主机（装了虚拟机的机器）建一个虚拟网卡作为网关，该网关地址通常会占用子网中的第1个ip，而虚拟机中所有的机器也需要一个网关和宿主机进行通信，因此也需要一块网卡，一个地址，这个地址通常占用子网中的第2个ip

service network restart会重启所有网卡，每个服务器上至少有两块网卡，因此可能会造成服务的不稳定，推荐使用
ifdown eth0:ifup eth0



nginx 默认的配置文件在安装目录的conf下面的nginx.conf

防火墙命令 firewall-cmd

域名->IP的解析过程：查hosts -> 查DNS缓存 -> 查DNS服务器

创建不能登录操作系统、但有家目录的用户：useradd -s /sbin/nologin，ftp客户端通常属于这类用户

秘钥：.key 相当于私钥
证书：.csr 相当于公钥
签字后的证书：.crt 由证书转化而来，相比于证书，有一定的有效期、加密类型、加密长度

生产环境下，CA证书要去专门的http证书厂商注册购买，填写网站、公司信息才可以得到证书，浏览器会拿着这个证书校验，证书有效才会进行数据传输，最终买到的就是上面的秘钥和签字后的证书

约束既可以针对行，也可以针对列
MySQL的唯一约束指的是列或列的组合不能重复
主键约束是唯一约束和非空约束的组合
索引是某个表中一个或若干字段的组合，表的存储由两部分组成，一部分用来存放数据，另一部分用来存放索引页面

索引工作原理：数据检索花费的大部分开销是磁盘IO，没有索引就需要去磁盘上读表的每个数据页，如果有索引则只需要查找索引页面就可以了

存储引擎是存储数据、建立索引、更新查询数据的实现方式，存储引擎是基于表的，而不是基于库的，所以存储引擎也可以被称为表类型，Oracle、SqlServer有多种存储引擎，MySQL有多种存储引擎，提供了插件式的存储引擎架构，甚至可以自己编写存储引擎
MySQL的存储引擎：
MYISAM
INNODB
MEMORY
只有INNODB引擎支持事务

数据库系统是建立在文件系统之上的：
数据库系统可以分以下几层：
表示层：数据库-数据库表-记录、字段
逻辑层：数据库的存储引擎
物理层：数据库文件

文件系统分层：
表示层：文件名（文件类型）
逻辑层：文件系统类型（EXT4 NTFS XFS）
物理层：分区块（数据块）-> 扇区


集群
负载均衡LBC集群：分担服务的总体压力 每个子节点的工作是一致的
高可用集群HAC：尽可能保障服务状态的可用性
高性能运算集群HPC：提供单台服务器提供不了的计算能力 每个子节点参与工作的一部分
LBC可以增加访问量，HPC用于提升处理效率

f5是硬件实现负载均衡
数据链路层负载均衡：f5
传输层负载均衡：lvs
应用层负载均衡：NGINX

lvs适用于cs、bs两种模式下的负载均衡
nginx只适用于bs模式下的负载均衡

LVS工作模式分类：
NAT
TUN
DR：负载均衡服务器和应用服务器处在一个广播域中


ESXI是VMWare公司的一款软件











问题：
假如执行了 rm -rf /，swap分区是否会被删除？
对于Linux来说，为什么不把/boot目录、/home目录也放到根目录下，为什么根目录、/boot目录、/home目录有在硬盘中有各自的分区？
客户机没能从DHCP服务器中得到IP时，会生成一个169.254.0.0网段的一个B类的虚拟IP，这个IP有什么用？
如果客户端配置了DNS服务器地址为8.8.8.8，那会不会去本地DNS服务器解析域名？