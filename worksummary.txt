1、表单校验插件封装问题
2、商品列表页多条件筛选问题，将问题往对象、数组的思路转化
3、后台管理系统商品列表页分页插件封装需要生成真数据，修改后台文件
4、砍价应用弹框，关闭按钮在安卓手机中点多次才生效
5、微信小应用，iPhone中不关闭软键盘在多个输入框之间切换时onChange事件不会触发
6、微信小应用，自己模拟底部导航，高亮状态选中实现不同思路对于后期产品详情页不选中任何一个按钮的影响
7、超能访客，安卓原生弹框和js弹框同时弹出来，导致程序运行异常
8、省市区三级联动返回json格式和html片段的区别、树形菜单数据结构的生成放到服务端，节省性能了吗？
9、将call和apply看为函数对象的方法
10、修改discuz样式，分析整个discuz框架执行的流程
11、Safari浏览器下首页某个js文件需要30s左右才可以加载完成，seajs编译编译过慢
12、微信小程序客户端支付由于没有数据传递没有请求，纯客户端在交互，所以没有安全问题
13、列表左侧选中与不选中，数据异常时如何处理，4种情况：始终可以选中、始终不能选中、选中、非选中

让元素排成一排的方法
1、float 注意清浮动
2、inline-block 元素之间有换行时会有小间隙，垂直居中的问题
注：
	移动端布局，左侧固定宽，右侧根据屏幕宽度自适应，常用calc(100% - 左侧宽度)
	将元素平均分配于每一行

让一个元素消失的方法
1、visibility: hidden;
2、display: block;
3、position: absolute; left: 10000px;
4、定义很大的margin
案例：
	站长统计不希望显示在页面中可以用上面的方式

画三角形
border: 10px solid #000;
border-left-color: #fff;
border-right-color: #fff;
border-bottom-color: #fff;


元素垂直居中：
1、position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
2、给父级加css，单行居中：display: flex; justify-content: center; align-items: center; height: 200px; 注意父级要定高
3、给父级加css，多行居中：display: flex; justify-content: center; align-items: center; flex-wrap: wrap/wrap-reverse;
主要样式：
flex-direction 排列的方向
justify-content 项目的对齐方式 flex-start flex-end center
align-items 轴的位置 flex-start flex-end center


面向对象的理解：
利用表单校验类做类比
继承要从ES3 ES5 ES6依次说明
在面向过程的代码中经常充斥这各种函数，函数之间的调用形成一个很长的栈，而且为了使函数能复用，函数之间有参数的传递，除此之外有一些变量需要被多个函数公用，因此要放到一个层级较高的位置，久而久之，这种依赖关系会变得极为复杂，因此诞生了面向对象，面向对象将一些函数之间传递的参数变成了实例属性，让公用的变量变成静态属性，这样函数就可以转一，复用性也更强，例如一个商品详情页有多个规格，当我们点击规格项改变规格的时候，如果不采用面向对象，则要在规格DOM元素上绑定当前规格的id

结合异步对象加强对面向对象的理解，设想如果我们直接实现3个请求链式调用的场景，肯定需要将这多个请求放到一个数组中，由于该数组会在多个地方用到，因此需要提升它到较高的作用域层级，请求的状态也是如此，也要将其提升到一个较高的层级，高层作用域中定义的变量越多越难维护，典型的痛点就是当想要复用一个函数，除了将这个函数抽出来之外，这个函数依赖一大堆全局变量，这些变量也得跟着抽出来，少抽一个可能就挂了，而面向对象则专门提供了一个存放这些高层作用域变量的场所：属性，因此对于异步方法队列，队列状态等这些信息的管理通常都会存在异步对象的属性当中，这也正是OOP三大特征之一：封装


闭包的理解：
举例react，react维护了一棵很大的state状态树，那么问题来了，这棵树在哪里定义？肯定是在react内部定义，而当页面加载完成之后，react初始化完毕，此时状态树这个对象依然在浏览器管辖的内存中存在，这棵树就是闭包，之后每次派发的action调用reducer生成新的状态树，react再拿这棵树和原来的树比较，找差异，再重新渲染，整个过程下来一直在利用这个闭包对象
闭包常用的用途总结：在异步操作（通常会是一个函数）方法内部，如果需要取比该方法作用域层级高的变量的话，该变量就成为了闭包
闭包的特性：外界不能随便拿到，例如react的那棵树，我们不能随便改，因为react的宗旨就是不让直接改state，因此不能直接访问到，必须要派发action间接访问修改，所以我们可以用高级语言简单模仿下闭包的实现：
// 为方便使用定义为静态类
static class Closure {
	private static HashMap<String, Node> state;
	
	public static HashMap<String, Node> reducer(HashMap<String, Node> state, String type) {
		// 改状态...
	}
}


原型链的理解：
function Animal() {
	this.a = 1; // 类似Java中的实例成员
}
Animal.prototype.b = 1; // 类似Java中的静态成员
Animal.prototype.changeA = function() {
	
};

class Animal {
	private int a = 1; // 实例成员
	public static int b = 1; // 功能类似于挂载原型对象上的成员，Java中可以通过访问修饰符控制外部及其子类能否访问该成员
	int c = 1; // 定义在了类下面，即使没有写访问修饰符，也有默认访问修饰符，也是类的成员变量
	public int getNumber() {
		
	}
}


关于CDN：
CDN加速原理：
1、内容缓存（缓存到内存或本地文件）
通常会用漏斗服务squid对用户请求做一遍过滤，通过查看本地是否有缓存，如果有则直接返回给用户，如果没有则根据后台配置去源站将数据抓取过来，把抓过来的数据做缓存，把该数据返回给用户，这样就分担了源站的负担，让页面访问的速度变快
CDN服务商在全国近百个城市都布有CDN节点，每个服务商有约200、300个，例如展讯、蓝汛、世纪互联，以及云服务（百度云、阿里云），还有新秀迅雷星域，迅雷星域属于流量共享模式，和传统CDN模式不太一样
2、多线路支持 国情：南电信北联通
同时支持电信、网通、联通等多种线路
不同于双线机房的双线接入
目的：减少跨网访问

适用CDN的范围：静态和更新频率低的内容、数据流量大的网站

使用CDN的带宽价格更便宜

CDN的具体使用



浏览器请求过程的理解：
1、DNS域名解析
	先从本地hosts中寻找有没有该域名对应的IP，没找到的话再通过本地DNS服务器、ISP的DNS服务器、一二三级以及根域名服务器最终找到IP地址
	注：
	1) DNS是一个应用层的协议，应用层封装好头信息之后，传输层采用UDP来将其交给网络层，通过链路层及物理层的封装发送到对应的DNS服务器
	2) 在此过程中寻找hosts的步骤中是否封装了报文，如果封装了到底将其封装到了那一层，和驱动有关
	3) DNS驱动应该封装在了操作系统中，浏览器应该是调用操作系统给提供的DNS解析接口
	
2、寻找主机和服务器端处理
	浏览器根据输入的url封装一个HTTP请求报文，包括请求行、请求头、请求正文，打开一个TCP链接（三次握手），链接建立后将该请求发给服务器，服务器则根据请求头中的信息通过运行在服务器这个容器中的脚本，例如PHP、Jsp、servlet、nodejs，这些脚本还可能会去访问数据库服务器做查询，或者访问Redis服务器做查询，查询到结果后再回到应用服务器中将得到的结果做处理封装响应报文，通过刚刚建立的TCP链接将这个报文返回去
	注：
	1) 请求行中包含了HTTP的协议版本，如果是1.0版本（1996年左右），则打开一个TCP链接，得到响应之后将该链接关闭，浏览器接下来解析响应头中的超文本，即html时一般来说需要再次发起请求，例如遇到带有src属性的标签img、link、script等则需要再次建立TCP链接，如果是1.1版本（1997年左右）则服务器或浏览器其中一端会查看请求头中一个叫做Connection的字段，它的值如果是keep-alive的话就保持这个TCP链接，如果是close则关闭该链接，何时为close取决于服务器和浏览器客户端的协商，例如超过了超时时间，或者出于某种原因某一端主动发了FIN报文给另一端（例如浏览器限制同时发给同一个域名的请求的数量等等）
	2) 每个HTTP请求对应一个资源，在浏览器客户端没有该资源缓存而第一次请求该资源时请求头中是没有If-Modified-Since字段的，但请求过一次之后服务器会通过Last-Modified告诉浏览器这个资源什么时候被改过，根据浏览器自身的缓存机制，当再次请求该资源而发出请求时会将当初服务器给的这个Last-Modified和现在的时间做比较，如果早于当前时间，会带上If-Modified-Since字段，该字段被送到服务器端之后会查看在这个时间之后有没有改过这个文件，如果没有，则返回304，响应头为空
	3) 关于缓存的控制，在服务器中根据配置（例如Apache中的ExpiresDefault字段等）有时会返回Expires字段，告诉浏览器如果没有超过这个时间，干脆连请求都不发
	4) 当服务器给在响应头中放了一个Refresh字段，值为"5;URL=www.baidu.com"，通常服务器应用程序内部会根据配置将响应行中的响应状态码设置为301、302、303、307等等，则浏览器在接到该响应之后就会结合响应头中Refresh和Location字段对应的值再发起一个新的请求
	5) 在TCP层，源端口号，也就是客户端应用程序的端口号通常是随机端口号，目的端口号，也就是服务器中监听的端口号通常是知名端口号（例如http服务器通常监听80端口）
	6) 当服务器访问量较大时，通常采用集群来降低压力，一旦集群则涉及到如何向这么多服务器转发，通常在这一块做的比较好的有nginx，这也是一款服务器应用程序，可专门用于并发量很大的场合做转发，配置相关的转发策略就可以在负载均衡中发挥作用
	7) 在数据访问量超大时，即使有反向代理，各个服务器依然很忙碌，则需根据其自身特点进行相对应的优化，例如对于应用服务器(CPU运算密集型)采用合理的算法尽量减少CPU运算次数，对于数据库服务器(IO访问密集型)优化sql、读写分离、NoSQL架构等等，对于Redis服务器(内存运算密集型)好像用storm等，此外还有文件服务器，文件服务器再细分的话还有日志服务器、图片服务器等等。在应用服务器中大约有两种套路，一种就是以nodejs为代表的单线程机制，即将所有的资源集中在一件事上，另一种是以Java等为代表的多线程机制，即给每个请求单开一小部分资源使并行执行，此处不知道理解的是否有误
	8) websocket
	9) https
	
3、浏览器从响应报文中得到内容之后的处理
	文件上传的原理？


关于服务器端渲染对于SEO影响的进一步考虑，可以研究一下爬虫内部的搜索算法，如果爬虫算法是匹配html中<h1>xxx</h1>这样做的，可以把这部分放在jsx中


关于XHR2支持二进制数据传输的进一步考虑


浏览器请求的过程：
由于现代网页通常包含了复数个（>=10）资源，而按照默认设定，一个连接中的每一个请求必须等待收到响应后才能发送下一个请求，所以如果复数的资源请求全部在一个连接one by one发送给服务器显然会很慢，而为了弥补这一缺陷，浏览器通常会默认开启多个TCP连接，然后再根据每个连接的状态在其中依次发送数据请求。各个浏览器允许并行链接数是不一样的，chrome是6个
至于何时关闭TCP请求，由浏览器控制，有两种情况：超时关闭，浏览器发送FIN包，然后等到服务器给客户端发送完数据也发送FIN包，就会关闭

302和304的区别


前端工程化

前端发展史：
浏览器原生DOM API过于底层，操作极为繁琐，因此诞生了prototype和jquery，2014年左右招聘信息上关键词是ext Yui Dojo prototype jquery
随着应用越来越复杂，在js中操作dom变得极为复杂且难以维护，MVC的慢慢被引用前端，2015年左右招聘信息上的关键词是backbone knockout angular1，以angular1最具有代表性，成功脱颖而出
随着流量越来越多流向手机端，angular1的性能问题变得极为突出（依赖注入、脏检测、编译极为耗费性能），2016，对于前端具有分水岭意义的一年，这一年MVC思想大爆发，Angular1势头依然很猛，招聘信息上慢慢开始出现新的关键词：Vue React
由于前端入门简单因此大量的人涌入这个行业，造成中低端前端大量过剩，而前端的要求越来越高，2017年，慢慢恢复理性，开始注重基础能力的提升

前端学习后台知识的原因：前端和后台交互的地方是工作中沟通最多的地方，而沟通的成本是极高的，当后台告诉前端一个参数是选填的时候，有的人选择不传这个参数，有的选择传undefined、null、空字符串等等，这些形式到了后台之后到底有什么区别，或者对于复杂的数据类型，例如某个字段是由id构成的数组，如果序列化去传递和通过id[0]=1&id[1]=2传递有何区别，Java平台下和PHP平台下的处理方式有何区别，后台接收到这些数据是转化成什么样的数据结构了，是链表还是线性表，为什么是这种数据结构，怎么传递数据有助于后台数据的转化，这些都是需要思考的问题

细节问题：当一个函数中逻辑很复杂时通常会有大量if else复杂的判断，这些判断语句如何管理？此时可以选择if或else中再套if或else，也可以选择先在最开头把所有的异常情况或修正情况都判断好，接下来再处理，例如jquery源码当中extend的实现就是很好的一个例子

当封装一个通用型较强的函数时如果需要传参，那么尽量写成{paramName: paramValue}的形式，在函数内部通过var paramName = obj.paramName的形式将其保存为局部变量再处理，绝对避免直接将paramValue作为参数，除非有十足的把握，将来只需要传这一个参数。


2017的主要任务：汇编语言 操作系统 计算机网络
为什么学习操作系统、计算机网络？
计算机网络：日常工作中经常在外网、内网之间切换，经常开虚拟机测试，经常登录远程服务器调试，HTTP请求的具体过程，TCP三次握手建立连接和ajax以及websocket内部具体运行的机制如何，和运维打交道时会有一系列的网络术语，因此非常需要学习
操作系统：以上的案例已经证明了操作系统有多重要的了不必多说，此外操作系统和编译原理有着极为紧密的关系


2018的主要任务：算法、编译、进一步巩固c++和Java
编译：前端框架内部无处不在用编译，但也仅仅用到了编译的前端部分，编译的精华在于后端：优化，优化部分又包括平台相关优化（物理上的优化）、平台无关优化（逻辑上的优化），除此之外浏览器处理各个node节点时建立的dom内存模型是什么样的
算法：遇到一个问题，为何有的人反应非常快，能很清晰的想到一个解决方案，而有的人想不出来，到底差距在哪儿？差在软实力，算法就是一个程序员的软实力、基本功


日常：数学、英语、阅读、历史、社会基础
研究这些的原因：看待一个问题的深度和广度不一样，内心的思考以及做出的行动也不一样，例如前端在工作中遇到某个问题在解决时，仅仅站在前端的角度考虑可能是一种解决方案，站在前后台交互的角度看可能又不一样，站在整个项目来看可能又不一样，站在整个产品体系架构来看又不一样，最后采用什么样的解决方案取决于看待问题的角度和站在什么样的高度，站的越高才看得越远，更何况想要跟公司里那么多人合作开发一定要彼此互相了解对方才可以


有了以上知识作为基础之后可以看一些综合性较强的书籍，例如：
赵炯0.xLinux内核源码注释
APUE
CSAPP
TCP/IP详解卷II
操作系统设计与实现

https://segmentfault.com/a/1190000004322487 你真的会使用XMLHttpRequest吗？

<body>
    <div id="article" class="a1">
        <p>文章内容</p>
        <p>文章内容</p>
        <p>文章内容</p>
        <p>文章内容</p>
        <p>文章内容</p>
    </div>
    <ul class="comment-list">
        <li class="item">
            <span>评论内容</span>
        </li>
        <li class="item">
            <span>评论内容</span>
        </li>
        <li class="item">
            <span>评论内容</span>
        </li>
    </ul>
    <ul class="pageCode">
        <li class="item"><a href="/article/566844.html"></a></li>
        <li class="item"><a href="/article/566844.html?comment_page=2"></a></li>
        <li class="item"><a href="/article/566844.html?comment_page=3"></a></li>
    </ul>
    <input type="text" id="text1" class="t1" value="err" />
    <input type="checkbox" checked="checked" id="check1" bbb="ggg" />
</body>
<script>
    var oTxt1 = document.getElementById("text1");
    var oCh1 = document.getElementById("check1");

    console.log(oTxt1.getAttribute("type"));
    console.log(oTxt1.type);

    console.log(oTxt1.getAttribute("id"));
    console.log(oTxt1.id);

    console.log(oTxt1.getAttribute("class"));
    console.log(oTxt1.className);

    console.log(oTxt1.getAttribute("value"));
    console.log(oTxt1.value);

    // ========================

    console.log(oCh1.getAttribute("checked"));
    console.log(oCh1.checked);

    console.log(oCh1.getAttribute("value"));
    console.log(oCh1.value);

    oCh1.setAttribute("aaa", "str");
    console.log(oCh1.getAttribute("aaa"));
    console.log(oCh1.aaa);

    oCh1.setAttribute("ccc", 123);
    console.log(oCh1.getAttribute("ccc"));
    console.log(oCh1.ccc);

    console.log(oCh1.getAttribute("bbb"));
    console.log(oCh1.bbb);

    // 试图用setAttribute的方式修改标签里面设置的属性
    // oCh1.setAttribute("bbb", "sss");
    // console.log("试图用setAttribute的方式修改标签里面设置的属性", oCh1.getAttribute("bbb"));
    // console.log(oCh1.bbb);

    // 试图用.的方式修改标签里面设置的属性
    oCh1.bbb = "ooo";
    // 结论是无法通过.的方式修改标签里面设置的属性
    console.log("试图用.的方式修改标签里面设置的属性", oCh1.getAttribute("bbb"));
    console.log(oCh1.bbb);

    oCh1.setAttribute("ddd", {a: {b: 1}});
    console.log(oCh1.getAttribute("ddd"));
    console.log(oCh1.ddd);

    oCh1.eee = {c: {d: 2}};
    console.log(oCh1.getAttribute("eee"));
    console.log(oCh1.eee);
</script>


搭建react+redux+ssr项目结构，用react开发电商后台系统，主要包括对webpack进行个性化配置，组件的封装（逻辑组件和傻瓜组件的拆分），state状态树设计，actionType的抽象，reducer函数的编写
项目关键点：
1、利用react-router路由管理整个项目的菜单，并实现按需加载
2、引入redux增强器，在每次按需加载页面时动态改变store上的state
3、服务端渲染时需要babel-register用于解析ES6语法，并且增加配置忽略css文件
服务器端渲染时缩水数据的生成要保证同客户端初始化后的store对象相同
服务器端渲染时项目启动文件实现热加载配置
4、建立nodejs(基于express框架)中间层，通过创建TCP客户端的方式建立与API服务器之间的链接
5、通过workerman框架创建TCP服务器接收由nodejs发来的请求并做相应的业务逻辑处理及数据库操作
6、session同步问题
7、对于react的内部原理需要有足够的理解

=======
If Modified Since和Last Modified请求头
keep-alive请求头

JavaScript中的运算符'+'实际上是一种运算符重载，类似C++中的cout << "hello,world" << endl;

高内聚、低耦合的案例：
node服务器中创建过滤器对接受来的请求做不同的处理，其中对于API请求，需建立连接然后创建TCP客户端和服务端通信，此时需封装一个建立TCP请求的方法createSocketClient，将请求的路径和参数作为该方法的参数，但是response对象则无需作为参数传入，因为通过调用response的send方法返回给浏览器数据是过滤器应该做的事情而不是createSocketClient该做的事，此时就需要在createSocketClient内部返回Promise对象，过滤器中注册监听函数，在监听函数中调用response.send();

CDN原理：
1、用户访问一个资源，DNS系统会将域名的解析权交给CNAME指向的CDN专用DNS服务器
2、CDN专用的DNS服务器会将负载均衡系统的IP返给用户
3、用户利用该IP向全局负载均衡系统发起请求
4、全局负载均衡系统根据用户IP地址及用户请求的内容URL，返给用户所在区域的负载均衡系统IP
5、用户用得到的IP访问区域负载均衡系统时会根据根据用户IP地址及用户请求的内容URL选择一台缓存服务器并将其IP返给用户
6、用户用得到的IP向缓存服务器发起请求，缓存服务器将内容返给用户，如果该缓存服务器上没有缓存用户想要的内容，该服务器要向上一级服务器请求内容并缓存到自己的磁盘中，以此类推到根服务器


TP框架中命名空间：
// 这是系统的规范要求，表示当前类是Home模块下的控制器类，命名空间和实际的控制器文件所在的路径是一致的
// 命名空间定义必须写在所有的PHP代码之前声明，否则会出错
namespace Home\Controller;
// 表示引入 Think\Controller 命名空间便于直接使用
use Think\Controller;
// 下面的类定义等同于class IndexController extends \Think\Controller;
class IndexController extends Controller {
    public function index(){
        echo 'hello,world!';
    }
}

C方法获取配置 config

闭包的应用：
路由前置拦截：
router.beforeEach((to, from, text) => {
  let def = []
  if (needLogin) {
    if ($store.getters.userInfo.isGet) {
      def.push(Promise.race([ $store.dispatch('getUserInfo'), timeout ]))
    }
  }
  Promise.all(def).then(res => {
    if (xxx) {
      next()
    }
  })
})

从dom元素上查看组件的名字
function vmMapToDom(vm) {
  vm.$el.setAttribute('vm', vm.$options.name)
  vm.$el.vm = vm
  var l = vm.$children.length,
    i = 0
  while (i < l) {
    vmMapToDom(vm.$children[i])
    i++
  }
}
vmMapToDom(App)