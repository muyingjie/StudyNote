任何loaders无法做的事情，plugins都可以做，plugins作用于整个构建过程，plugins用于文件优化，资源管理，环境变量注入
常用plugins：
CommonsChunkPlugin 将chunks相同的模块代码提取成公共js
CleanWebpackPlugin 清理构建目录
ExtractTextWebpackPlugin 将CSS从bundle文件里提取成一个独立的css文件
CopyWebpackPlugin 将文件或文件夹拷贝到构建的输出目录
HtmlWebpackPlugin 创建HTML文件去承载输出的bundle
UglifyjsWebpackPlugin 压缩js
ZipWebpackPlugin 将打包出的资源生成一个zip包

mode 是webpack4新增的一个选项，有production development none

在babelrc文件中，有presets和plugins两个概念，每个plugin可理解为一种功能，一个presets是多个plugin的集合

要让webpack解析ES6语法，需执行如下安装命令：
npm i @babel/core @babel-preset-env babel-loader -D
.babelrc文件如下
{
  "presets": [
    "@babel/preset-env"
  ]
}

webpack module rules中增加
{
  test: /.js$/,
  use: 'babel-loader'
}

添加解析jsx的包：
npm i react react-dom @babel/preset-react -D
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react"
  ]
}

webpack中解析css：css-loader、style-loader

图片和字体文件都可以用file-loader或url-loader来解析
url-loader与file-loader不同的是，前者可以做小图片的base64转换

热更新实现方式：
1、webpack-dev-server配合webpack.HotModuleReplacementPlugin
webpack-dev-server通常都会和webpack.HotModuleReplacementPlugin插件放在一起使用
webpack-dev-server只在监听到变动后重新编译，但不刷新浏览器
webpack-dev-server不输出文件，而是放在内存中，这一点是和webpack --watch的不同之处
2、webpack-dev-middleware
需要启一个独立的node服务器，webpack将输出的文件传输给这个服务器

autoprefixer：自动给css3样式添加浏览器前缀，使用方式如下：
{
  test: /.less$/,
  use: [
    MinCssExtractPlugin.loader,
    'css-loader',
    'less-loader',
    {
      loader: 'postcss-loader',
      options: {
        plugins: _ => [
          require('autoprefixer')({
            // ios 7以上的版本
            browsers: ['last 2 version', '>1%', 'ios 7']
          })
        ]
      }
    }
  ]
}

px自动转换成rem——px2rem-loader

raw-loader：将外部资源引入到当前位置：
<head>
  <title>xxx</title>
  <!-- 将当前目录下的meta文件放到此处，${}是ejs模板 -->
  ${ require('raw-loader!./meta.html') }
</head>
如果使用了es6，需要加上babel-loader：
<script>${ require('raw-loader!babel-loader../../node_modules/lib-flexible/flexible.js') }</script>

多页面打包，需要设置html-webpack-plugin数量：
可以通过glob.sync来动态获取所有入口，而不必写多个入口到entry，需要安装glob库
entry: glob.sync(path.join(__dirname, './src/*/index.js'))

const setMPA = _ => {
  const entry = {}
  const htmlWebpackPlugin = []
  const entryFiles = glob.sync(path.join(__dirname))

  entryFiles.map((f, i) => {
    const match = f.match(/src\/(.*)\/index\.js/)
    const pageName = match && match[1]
    entry[pageName] = f
    htmlWebpackPlugin.push(new HtmlWebpackPlugin(
      xxxxxx
    ))
  })

  return { entry, htmlWebpackPlugin }
}

webpack4中使用内置的SplitChunksPlugin来进行公共脚本分离，用来替代CommonsChunkPlugin插件


node_modules下的.bin目录中存在的可执行文件是从各个包的package.json中的bin下暴露出来的




为什么要搞一个.bin目录，没有这个目录的话有哪些不便？

全局安装的npm包会装到全局的node_modules中，全局的node_modules中各包下.bin目录里的命令是否可以直接执行？








==2021年01月18日23:42:17============================================================================================================================


babel需要安装的东西：
npm install @babel/core @babel/preset-env babel-loader --save-dev

解析ES6需要配置的预设
.babelrc
{
  "presets": [
    "@babel/preset-env"
  ]
}

module: {
 rules: [
   { test: /.js$/, use: "babel-loader" }
 ]
}

解析React JSX需要的配置：
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react" // 解析react
  ]
}

npm install react react-dom @babel/preset-react --save-dev


"plugins": [
  "@babel/proposal-class-properties"
]

'use strict';

import React from 'react';
import ReactDOM from 'react-dom';

class Search extends React.Component {

    render() {
        return <div className="search-text">
            搜索文字的内容<img src={ logo } />
        </div>;
    }
}

ReactDOM.render(
    <Search />,
    document.getElementById('root')
);



解析css、less、sass=======================================================================
npm install style-loader css-loader --save-dev

import React from 'react';
import ReactDOM from 'react-dom';
import './search.less';

class Search extends React.Component {

    render() {
        return <div className="search-text">
            搜索文字的内容<img src={ logo } />
        </div>;
    }
}

ReactDOM.render(
    <Search />,
    document.getElementById('root')
);

{ test: /.css$/, use: ['style-loader', 'css-loader'] }


npm install less-loader --save-dev
{ test: /.less$/, use: ['style-loader', 'css-loader', 'less-loader'] }




import logo from './images/logo.png';
import './search.less';


解析图片
{ test: /.(png|svg|jpg|gif)$/, use: ['file-loader'] }

import logo from './images/logo.png'
<img src={logo} />

解析字体
{ test: /.(woff|woff2|eot|ttf|otf)$/, use: ['file-loader'] }
@font-face {
  font-family: 'xxx';
  src: url('./xxx');
}

// 图片较小时，变成base64
{
  test: /.(png|svg|jpg|gif)$/,
  use: [{
    loader: 'file-loader',
    options: {
      limit: 10240
    }
  }]
}

文件监听：
webpack开启监听之后 webpack --watch只是能够自动构建
热更新负责在webpack构建之后不刷新浏览器进行更新
webpack-dev-server --open
const webpack = require('webpack')
plugins: [
  new webpack.HotModuleReplacementPlugin()
],
devServer: {
  contentBase: './dist',
  hot: true
}


除使用HotModuleReplacementPlugin实现热更新之外，还可以自己启一个node服务，将webpack-dev-middleware作为一个中间件放到express服务器中
const express = require('express');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev- middleware');
const app = express();
const config = require('./webpack.config.js'); const compiler = webpack(config);
 app.use(webpackDevMiddleware(compiler, { publicPath: config.output.publicPath
}));
app.listen(3000, function () {
 console.log('Example app listening on port 3000!\n');
});

热更新原理
两个过程：
1、启动过程：课件1-2-A-B的路径


rem是相对值
rem：font-size of the root element

px2rem-loader可以将px转换为rem

['style-loader', 'css-loader', 'sass-loader']

raw-loader 作用：静态资源内联，所谓内联，就像把css代码直接写到HTML标签上，即行内样式
例如在HTML页面的head里面：
通过
${ require('raw-loader!./meta.html') }
<script>${ require('raw-loader!babel-loader!../../node_modules/lib-flexible/flexible.js') }</script>
就可以将meta的内容引过来




多页面打包：
通过entry动态生成htmlWebpackPlugin的实例
需要借助glob库
npm install glob --save-dev
const setMPA = _ => {
  const entry = {}
  const htmlWebpackPlugin = []
  const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js'))
  Object.keys(entryFiles).map(index => {
    const entryFile = entryFiles[index]
    const match = entryFile.match(/src\(.*)\/index.js/)
    const pageName = match && match[1]

    entryFile[pageName] = entryFile
    htmlWebpackPlugin.push(
      new HtmlWebpackPlugin({
        xxx
      })
    )
  })
  return {
    entry,
    htmlWebpackPlugin
  }
}





sourcemap 关键字




webpack4内置了SplitChunksPlugin进行公共脚本分离，建议替代掉CommonsChunkPlugin
由于是内置插件，所以我们启用插件的方式并不是new SplitChunksPlugin这样的形式
而是配置一个和loader同级的选项——optimization：
optimization: {
  splitChunks: {
    minSize: 0, // 只要是公共文件，就提取出来，不看大小
    cacheGroups: {
      commons: {
        test: /(react|react-dom)/,
        name: 'vendors',
        chunks: 'all', // 无论同步引入还是异步引入都提取
        minChunks: 3 // 至少有3个地方引用了，才会提取为公共包
      }
    }
  }
}
需要注意，我们要将提取出的vendors chunk放到HtmlWebpackPlugin的chunks参数属性中，这样HTML才可以加载到这个chunk


除此之外还可以用HtmlWebpackExternalsPlugin
new HtmlWebpackExternalsPlugin({
  externals: [
    {
      module: 'react',
      entry: 'https://xxxx(react的cdn地址)', //可以是本地文件，也可以是cdn文件
      global: 'React'
    },
    {
      module: 'react-dom',
      entry: 'https://xxxx(react-dom的cdn地址)', //可以是本地文件，也可以是cdn文件
      global: 'ReactDOM'
    }
  ]
})

代码分割和动态import：
使用动态import时需要在babelrc中，加上：
"plugins": [
  "@babel/plugin-syntax-dynamic-import"
]

eslintrc文件中
extends是继承了哪个基础的eslint配置，如果在这个基础配置上修改，可以通过rules里面自定义规则来覆盖